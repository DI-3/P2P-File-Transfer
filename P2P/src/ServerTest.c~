#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> 
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#define PORT "9034"
#include "ProcessCommands.h"
// port we're listening on
// get sockaddr, IPv4 or IPv6:


void *get_in_addr(struct sockaddr *sa)
{
if (sa->sa_family == AF_INET) {
return &(((struct sockaddr_in*)sa)->sin_addr);
}
return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(void){

  fd_set master ;    
  fd_set read_fds ;
  int fdmax ;

  int listener ;  //listening socket
  int newfd ;  //newly accepted socket descriptor

  struct sockaddr_storage remoteaddr; //client address
  socklen_t addrlen ;

  char buf[256] ;
  int nbytes ;
  char remoteIP[INET6_ADDRSTRLEN];
  char cmd[100];
  int yes = 1;
  int i,j,rv;
  char *commands ;
  struct addrinfo hints,*ai,*p ;

  FD_ZERO(&master);
  FD_ZERO(&read_fds);

  //get a socket and bind it 
  memset(&hints,0,sizeof hints);
  hints.ai_family =AF_UNSPEC ;
  hints.ai_socktype = SOCK_STREAM ;
  hints.ai_flags = AI_PASSIVE ;


  if((rv = getaddrinfo(NULL,PORT,&hints,&ai)) !=0 ){
  	//error
  	fprintf(stderr,"selectserver %s\n",gai_strerror(rv));
  	exit(1);
  }else{
  	printf("Success");
  }

   for(p = ai; p!=NULL;p= p->ai_next){

     listener = socket(p->ai_family,p->ai_socktype,p->ai_protocol);
     if(listener < 0){
     	continue ;
     }

     setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int));
     
     if(bind(listener,p->ai_addr,p->ai_addrlen) < 0) {
        close(listener);;
     	continue ;
     } 
     break ;
    }
    
    //
    if(p == NULL) {

     fprintf(stderr,"selectserver  failed to bind%s\n",gai_strerror(rv));
     exit(2);
     
    } 

    freeaddrinfo(ai);

    //listen

    if(listen(listener,10) == -1){
     
     perror("listen");
     exit(3); 
    }

 // add the listtener to master set 

    FD_SET(listener,&master);
    FD_SET(0,&master);
    //FD_SET(1,&master);;

    fdmax = listener ;

    //main loop 

    for(;;){
        
        read_fds = master ;
    	
    	if(select(fdmax + 1,&read_fds,NULL,NULL,NULL) == -1){
    		perror("select");
    		exit(4);
    	}

    	//run through the existing connections looking for data

        for(i=0 ; i<=fdmax ;i++){
        	if(FD_ISSET(i,&read_fds)){ // we got one conncetion
               
               if(i == 0){
                
                //read the command from the terminal
                 fgets(cmd,sizeof cmd,stdin);
                 commands = cmd ;
                 processCommand(commands);
                 //send(1,cmd,sizeof cmd,0);
                 printf("The input data is %s\n",cmd);
                  

               }else{
               // if(i == 1){

               //  // nbytes = recv(,buf,sizeof buf,0) ;
               //  // printf("THe stdout datat%s\n",buf);


               // }

               if(i== listener){
               //handle new connection accept the connection and add it to the read set
                
                 addrlen = sizeof remoteaddr ;
                 newfd = accept(listener,(struct sockaddr *)&remoteaddr,&addrlen);

                 if(newfd == -1){
                   
                   perror("accept");

                 } else{
                  
                  FD_SET(newfd,&master);
                  
                  if(newfd > fdmax){
                  	fdmax = newfd ;
                  }
                  
                  printf("selectserver: new connection  from %s on socket %d",inet_ntop(remoteaddr.ss_family,get_in_addr((struct sockaddr*)&remoteaddr),remoteIP,INET6_ADDRSTRLEN),newfd);

                 }

               }else{

                  //handle data from the client
                     if((nbytes = recv(i,buf,sizeof buf,0)) <= 0 ){
                     	if(nbytes == 0 ){
                     		//connection closed
                     		printf("selected server: socket %d hung up\n",i);
                     	}else{
                     		perror("recv");
                     	} 
                     	close(i);
                     	FD_CLR(i,&master);
                     }else{
                     	//we have data from the client
                     	printf("selected server data : %s",buf);
                     }



               }
              }

        	}
        }




    } 

   return 0 ;
    

}     